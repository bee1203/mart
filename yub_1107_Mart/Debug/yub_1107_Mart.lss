
yub_1107_Mart.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d77  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008bd  00000000  00000000  00001103  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000476  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ca  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	b7 d0       	rcall	.+366    	; 0x222 <main>
  b4:	b8 c0       	rjmp	.+368    	; 0x226 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <_Z10init_PORTCv>:
#define ENABLE  (PORTC |= 0x04)
#define DISABLE (PORTC &= 0xFB)

void init_PORTC(void)
{
  DDRC = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
  PORTC = 0xFF;
  bc:	85 bb       	out	0x15, r24	; 21
  be:	08 95       	ret

000000c0 <_Z14instrction_outh>:
}
 
void instrction_out(unsigned char b)
{
	PORTC = b&0xF0;
  c0:	98 2f       	mov	r25, r24
  c2:	90 7f       	andi	r25, 0xF0	; 240
  c4:	95 bb       	out	0x15, r25	; 21
	ENABLE;
  c6:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
  c8:	aa 98       	cbi	0x15, 2	; 21
	PORTC=((b<<4)&0xF0);
  ca:	20 e1       	ldi	r18, 0x10	; 16
  cc:	82 9f       	mul	r24, r18
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	85 bb       	out	0x15, r24	; 21
	ENABLE;
  d4:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
  d6:	aa 98       	cbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9f e1       	ldi	r25, 0x1F	; 31
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <_Z14instrction_outh+0x1c>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <_Z14instrction_outh+0x22>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <_Z8char_outh>:
	_delay_ms(2);
}
void char_out(unsigned char b)
{
	PORTC=(b&0xF0)|0x01;
  e6:	98 2f       	mov	r25, r24
  e8:	90 7f       	andi	r25, 0xF0	; 240
  ea:	91 60       	ori	r25, 0x01	; 1
  ec:	95 bb       	out	0x15, r25	; 21
	ENABLE;
  ee:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
  f0:	aa 98       	cbi	0x15, 2	; 21
	PORTC=((b<<4)&0xF0)|0x01;
  f2:	20 e1       	ldi	r18, 0x10	; 16
  f4:	82 9f       	mul	r24, r18
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
	ENABLE;
  fe:	aa 9a       	sbi	0x15, 2	; 21
	DISABLE;
 100:	aa 98       	cbi	0x15, 2	; 21
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <_Z8char_outh+0x20>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_Z8char_outh+0x26>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <_Z10lcd_gotoxyhh>:
}
void lcd_gotoxy(unsigned char x, unsigned char y)
{
	// 16 * 2 Character LCD  
	//  Busy();
	switch(y)
 110:	66 23       	and	r22, r22
 112:	19 f0       	breq	.+6      	; 0x11a <_Z10lcd_gotoxyhh+0xa>
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	21 f0       	breq	.+8      	; 0x120 <_Z10lcd_gotoxyhh+0x10>
 118:	08 95       	ret
	{
	    case 0 : instrction_out(0x80+x); break;
 11a:	80 58       	subi	r24, 0x80	; 128
 11c:	d1 cf       	rjmp	.-94     	; 0xc0 <_Z14instrction_outh>
 11e:	08 95       	ret
	    case 1 : instrction_out(0xC0+x); break;
 120:	80 54       	subi	r24, 0x40	; 64
 122:	ce cf       	rjmp	.-100    	; 0xc0 <_Z14instrction_outh>
 124:	08 95       	ret

00000126 <_Z9lcd_putsfhhPh>:
	}
}
void lcd_putsf(unsigned char x, unsigned char y, unsigned char *str)
{
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	04 2f       	mov	r16, r20
 130:	15 2f       	mov	r17, r21
	unsigned int i=0;
	lcd_gotoxy(x,y);
 132:	ee df       	rcall	.-36     	; 0x110 <_Z10lcd_gotoxyhh>
 134:	c0 2f       	mov	r28, r16
 136:	d1 2f       	mov	r29, r17
	do
	{
		char_out(str[i]);
 138:	89 91       	ld	r24, Y+
 13a:	d5 df       	rcall	.-86     	; 0xe6 <_Z8char_outh>
}
void lcd_putsf(unsigned char x, unsigned char y, unsigned char *str)
{
	unsigned int i=0;
	lcd_gotoxy(x,y);
	do
 13c:	88 81       	ld	r24, Y
 13e:	81 11       	cpse	r24, r1
 140:	fb cf       	rjmp	.-10     	; 0x138 <_Z9lcd_putsfhhPh+0x12>
	{
		char_out(str[i]);
	}
	while(str[++i]!='\0');
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	08 95       	ret

0000014c <_Z8lcd_initv>:
void lcd_init(void)
{
	init_PORTC();
 14c:	b5 df       	rcall	.-150    	; 0xb8 <_Z10init_PORTCv>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	83 ec       	ldi	r24, 0xC3	; 195
 152:	99 e0       	ldi	r25, 0x09	; 9
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <_Z8lcd_initv+0x8>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_Z8lcd_initv+0x12>
 15e:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f e5       	ldi	r24, 0x5F	; 95
 162:	99 e0       	ldi	r25, 0x09	; 9
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <_Z8lcd_initv+0x18>
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z8lcd_initv+0x1e>
 16a:	00 00       	nop
	_delay_ms(200);
	_delay_us(600);
	instrction_out(0x28);
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	a8 df       	rcall	.-176    	; 0xc0 <_Z14instrction_outh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	9f ef       	ldi	r25, 0xFF	; 255
 172:	23 ec       	ldi	r18, 0xC3	; 195
 174:	89 e0       	ldi	r24, 0x09	; 9
 176:	91 50       	subi	r25, 0x01	; 1
 178:	20 40       	sbci	r18, 0x00	; 0
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <_Z8lcd_initv+0x2a>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <_Z8lcd_initv+0x34>
	_delay_ms(200);
	instrction_out(0x28);
 180:	00 00       	nop
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	9d df       	rcall	.-198    	; 0xc0 <_Z14instrction_outh>
 186:	9f ef       	ldi	r25, 0xFF	; 255
 188:	23 ec       	ldi	r18, 0xC3	; 195
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	91 50       	subi	r25, 0x01	; 1
 18e:	20 40       	sbci	r18, 0x00	; 0
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <_Z8lcd_initv+0x40>
 194:	00 c0       	rjmp	.+0      	; 0x196 <_Z8lcd_initv+0x4a>
	_delay_ms(200);
	instrction_out(0x0C);
 196:	00 00       	nop
 198:	8c e0       	ldi	r24, 0x0C	; 12
	instrction_out(0x06);
 19a:	92 df       	rcall	.-220    	; 0xc0 <_Z14instrction_outh>
 19c:	86 e0       	ldi	r24, 0x06	; 6
	instrction_out(0x02);
 19e:	90 df       	rcall	.-224    	; 0xc0 <_Z14instrction_outh>
 1a0:	82 e0       	ldi	r24, 0x02	; 2
	instrction_out(0x01);
 1a2:	8e df       	rcall	.-228    	; 0xc0 <_Z14instrction_outh>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8c df       	rcall	.-232    	; 0xc0 <_Z14instrction_outh>
	instrction_out(0x01);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	8a cf       	rjmp	.-236    	; 0xc0 <_Z14instrction_outh>
 1ac:	08 95       	ret

000001ae <_Z9lcd_clearv>:
 1ae:	81 e0       	ldi	r24, 0x01	; 1
}
void lcd_clear(void)
{
	instrction_out(0x01);
 1b0:	87 df       	rcall	.-242    	; 0xc0 <_Z14instrction_outh>
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9c e9       	ldi	r25, 0x9C	; 156
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <_Z9lcd_clearv+0x8>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_Z9lcd_clearv+0xe>
 1bc:	00 00       	nop
 1be:	08 95       	ret

000001c0 <_Z4initv>:
#define SW5 45
#define SW6 77
#define SW7 27

void init()
{
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	DDRA = 0xff;  // 0 1 : Moter  
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	8a bb       	out	0x1a, r24	; 26
				  // 5 6 7 : LED
	DDRD = 0x0f;  // 0 1 2 3 : Row
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	81 bb       	out	0x11, r24	; 17
				  // 4 5 6 7 : Col
	lcd_init();
 1ce:	be df       	rcall	.-132    	; 0x14c <_Z8lcd_initv>
	lcd_clear();
 1d0:	ee df       	rcall	.-36     	; 0x1ae <_Z9lcd_clearv>
 1d2:	c2 e0       	ldi	r28, 0x02	; 2
 1d4:	d0 e0       	ldi	r29, 0x00	; 0
 1d6:	10 e7       	ldi	r17, 0x70	; 112
		lcd_putsf(0,0,(unsigned char*)"     MARKET     ");
		lcd_putsf(0,1,(unsigned char*)"     SYSTEM     ");
		PORTA = 0b00000000;
		_delay_ms(100);
		lcd_clear();
		PORTA = 0b01110000;
 1d8:	40 e0       	ldi	r20, 0x00	; 0
	lcd_clear();
	
	for (int i = 0; i < 2; i++)
	{
		
		lcd_putsf(0,0,(unsigned char*)"     MARKET     ");
 1da:	51 e0       	ldi	r21, 0x01	; 1
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	a2 df       	rcall	.-188    	; 0x126 <_Z9lcd_putsfhhPh>
 1e2:	41 e1       	ldi	r20, 0x11	; 17
		lcd_putsf(0,1,(unsigned char*)"     SYSTEM     ");
 1e4:	51 e0       	ldi	r21, 0x01	; 1
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	9d df       	rcall	.-198    	; 0x126 <_Z9lcd_putsfhhPh>
 1ec:	1b ba       	out	0x1b, r1	; 27
		PORTA = 0b00000000;
 1ee:	2f ef       	ldi	r18, 0xFF	; 255
 1f0:	81 ee       	ldi	r24, 0xE1	; 225
 1f2:	94 e0       	ldi	r25, 0x04	; 4
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <_Z4initv+0x34>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <_Z4initv+0x3e>
 1fe:	00 00       	nop
		_delay_ms(100);
		lcd_clear();
 200:	d6 df       	rcall	.-84     	; 0x1ae <_Z9lcd_clearv>
 202:	1b bb       	out	0x1b, r17	; 27
		PORTA = 0b01110000;
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	81 ee       	ldi	r24, 0xE1	; 225
 208:	94 e0       	ldi	r25, 0x04	; 4
 20a:	21 50       	subi	r18, 0x01	; 1
 20c:	80 40       	sbci	r24, 0x00	; 0
 20e:	90 40       	sbci	r25, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <_Z4initv+0x4a>
 212:	00 c0       	rjmp	.+0      	; 0x214 <_Z4initv+0x54>
 214:	00 00       	nop
 216:	21 97       	sbiw	r28, 0x01	; 1
 218:	f9 f6       	brne	.-66     	; 0x1d8 <_Z4initv+0x18>
	DDRD = 0x0f;  // 0 1 2 3 : Row
				  // 4 5 6 7 : Col
	lcd_init();
	lcd_clear();
	
	for (int i = 0; i < 2; i++)
 21a:	df 91       	pop	r29
		_delay_ms(100);
		lcd_clear();
		PORTA = 0b01110000;
		_delay_ms(100);
	}
}
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	08 95       	ret

00000222 <main>:
 222:	ce df       	rcall	.-100    	; 0x1c0 <_Z4initv>

#include "myFunc.h"

int main(void)
{
	init();
 224:	ff cf       	rjmp	.-2      	; 0x224 <main+0x2>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
